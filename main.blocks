<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="r|RBna$Y+LwQ[TPAEUbQ" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="H?@@;Xb$;9mN=u_?W?*F" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let result = 0" numlines="1" declaredvars="result"></mutation><next><block type="typescript_statement" id="A{Vn^Nl)4LUL;9.p.OCG" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let spinRPM = 0" numlines="1" declaredvars="spinRPM"></mutation><next><block type="typescript_statement" id="X%eChh!?x)gC!Jzk3Xmo" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Task {" line1="    Scan," line2="    SetNorth," line3="    Measure" line4="}" numlines="5"></mutation><next><block type="typescript_statement" id="nV^5k},+R2l-qCfj#CZ}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let nextTask: Task = Task.Scan" numlines="1" declaredvars="nextTask"></mutation><next><block type="basic_show_arrow" id="sN-Xke6_=HVsyQAt=ev-"><value name="i"><shadow type="device_arrow" id="H9JsB~s{fuGfuoDSsj6U"><field name="arrow">ArrowNames.West</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id=".^z3:vQ(uX?:oE=nIt-L" x="341" y="0"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="function_call" id="i.S#+@yxj?Ch[+HHf.l*"><mutation name="performSetup" functionid="kuGBiGbnq;{hUPB-]Or3"></mutation></block></statement></block><block type="device_button_event" id="bzVj]x#8FPBa=(Zl#x{i" x="603" y="0"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="function_call" id="[qO_q!woOpG]rJn5~V$^"><mutation name="measure" functionid="R@84t::DXQ2#H72`|rg-"></mutation></block></statement></block><block type="function_definition" id="s8D.8OkD-jj*+SgZ?gP." x="866" y="0"><mutation name="performSetup" functionid="kuGBiGbnq;{hUPB-]Or3"></mutation><field name="function_name">performSetup</field><statement name="STACK"><block type="typescript_statement" id="(Pg.gE[L5ELdwCfZ3#[+" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (nextTask) {" line1="        case Task.Scan:" line2="            let scanTime = 6000 // ...to MANUALLY rotate turntable jig twice (SMOOOOTHLY!)" line3="            basic.showString(&quot;S&quot;)" line4="            basic.pause(1000)" line5="            basic.showString(&quot;_&quot;)" line6="            heading.scanClockwise(scanTime)" line7="            basic.showIcon(IconNames.Yes)" line8="            basic.pause(1000)" line9="            basic.clearScreen()" line10="            basic.showArrow(ArrowNames.West)" line11="            nextTask = Task.SetNorth" line12="            break" line13="" line14="        case Task.SetNorth:" line15="            basic.showString(&quot;N&quot;)" line16="            basic.pause(1000)" line17="            basic.clearScreen()" line18="            result = heading.setNorth()" line19="" line20="            if (result &lt; 0) {" line21="                basic.showIcon(IconNames.Skull) // problem with scan data analysis" line22="                basic.pause(1000)" line23="                basic.showNumber(result)" line24="                basic.pause(1000)" line25="                basic.clearScreen()" line26="                basic.showArrow(ArrowNames.West)" line27="                nextTask = Task.Scan // restart with a fresh scan" line28="            } else {" line29="                spinRPM = heading.spinRate() // ...just out of interest" line30="                basic.showNumber(Math.floor(spinRPM))" line31="                basic.pause(1000)" line32="                basic.showIcon(IconNames.Yes)" line33="                basic.pause(500)" line34="                basic.showLeds(`" line35="                    # # . # #" line36="                    # . . . #" line37="                    . . # . ." line38="                    # . . . #" line39="                    # # . # #" line40="                    `)" line41="                basic.pause(500)" line42="                basic.showArrow(ArrowNames.East)" line43="                nextTask = Task.Measure" line44="            }" line45="            break" line46="" line47="        case Task.Measure: // Button A allows new North setting" line48="            basic.showIcon(IconNames.No)" line49="            basic.pause(1000)" line50="            basic.clearScreen()" line51="            basic.showArrow(ArrowNames.West)" line52="            nextTask = Task.SetNorth // reset new North" line53="            break" line54="    }" numlines="55"></mutation></block></statement></block><block type="function_definition" id=",{f9]YPhS7b92;A0R{4B" x="1735" y="0"><mutation name="measure" functionid="R@84t::DXQ2#H72`|rg-"></mutation><field name="function_name">measure</field><statement name="STACK"><block type="typescript_statement" id="yreNCA8+8#{$MS`.vrk=" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (nextTask) {" line1="        // ? sequence error?" line2="        case Task.SetNorth:" line3="        case Task.Scan: // use button A to do a scan first" line4="            for (let i = 0; i &lt; 5; i++) {" line5="                basic.clearScreen()" line6="                basic.pause(100)" line7="                basic.showArrow(ArrowNames.West)" line8="            }" line9="            break" line10="" line11="        case Task.Measure: // OK, take a new heading measurement" line12="            basic.pause(200)" line13="            basic.clearScreen()" line14="            basic.pause(50)" line15="            let compass = heading.degrees()" line16="            basic.showNumber(Math.floor(compass))" line17="            basic.pause(500)" line18="            // now MANUALLY move to next test-angle..." line19="            basic.showLeds(`" line20="                    # # . # #" line21="                    # . . . #" line22="                    . . . . ." line23="                    # . . . #" line24="                    # # . # #" line25="                    `)" line26="            basic.pause(200)" line27="            break" line28="    }" numlines="29"></mutation></block></statement></block></xml>